Plan unificado üöÄ
He cruzado punto por punto tu plan original y el que te pas√≥ el otro ingeniero para sacar una √∫nica estrategia que maximiza :

Precisi√≥n y flexibilidad (GPT-4o Vision + opci√≥n de fallback)

UX suave (c√°mara nativa, loaders y correcciones r√°pidas)

Seguridad/coste (Edge Function + Storage p√∫blico controlado)

Mantenibilidad (nueva capa de estado aislada y rutas claramente acotadas)

A continuaci√≥n te dejo la versi√≥n fusionada.

1 ¬∑ Mapa de pantallas & navegaci√≥n
Ruta Expo Router	Componente	Descripci√≥n	Nuevo/Mod
(tabs)/nutrition.tsx	NutritionHome	DailyProgress + RecentFoods + bot√≥n Take Photo	Mod.
(tabs)/nutrition/capture.tsx	CaptureScreen	C√°mara a fullscreen, compresi√≥n y subida.	Nuevo
(tabs)/nutrition/analyzing.tsx	AnalyzingScreen	Spinner + texto; se cierra en cuanto llega IA.	Nuevo
(tabs)/nutrition/review/[draftId].tsx	MealReviewScreen	Banner foto, cards macros, ConfidenceBar, Save /Fix‚≠ê.	Nuevo
(tabs)/nutrition/meal/[mealId].tsx	MealDetailScreen	Modo lectura de un meal guardado.	Nuevo

2 ¬∑ Componentes reutilizables
Componente	Carpeta	Uso
NutrientCard	components/nutrition	Calor√≠as/Macros individuales
ConfidenceBar	components/nutrition	Escala 1‚Äì10 con color gradiente
FoodItemCard	components/nutrition	Listado de cada ingrediente
FoodAnalysisCard (opcional)	components/nutrition	Agrupa foto + resumen para RecentFoods

Todos con estilo coherente a tu theme/colors.ts (borde 2xl, sombras suaves, padding ‚â• p-2).

3 ¬∑ Estado global & hooks
store/nutritionStore.ts (ya esbozado en la propuesta del ingeniero; lo mantenemos).

A√±adir selector draftId para mapear la ruta [draftId].tsx.

hooks/useMealsToday.ts

Lee meals de hoy, devuelve totales y lista, refrescando con un subscribe de Supabase Realtime.

hooks/useUploadImage.ts

Abstracci√≥n para subir y obtener publicUrl, reutilizable en otros flujos futuros.

4 ¬∑ Pipeline t√©cnico
scss
Copiar
Editar
Camera ‚Üí uploadMealImage() ‚îÄ‚îê
                            ‚îú‚îÄ Edge Function analyze-food ‚Üí GPT-4o Vision
            Fix‚≠ê (texto) ‚îÄ‚îÄ‚îÄ‚îò
Captura & compresi√≥n

expo-camera + expo-image-manipulator ‚Üí JPEG ~1 MB, m√°x 1280 px.

Subida

Bucket meal-images, path {userId}/{yyyy-mm-dd}-{uuid}.jpg.

Pol√≠tica RLS: insert / delete s√≥lo due√±o, select p√∫blica.

Edge Function analyze-food

Versi√≥n del ingeniero + peque√±os ajustes:

Forzamos temperature: 0.2 para consistencia.

Limitamos max_tokens a 800.

A√±adimos guardia if (!content.startsWith('{')) ‚Üí re-prompt con ‚ÄúReturn JSON only‚Äù.

Draft en Client

Guardamos an√°lisis en nutritionStore.currentAnalysis + draftId (uuid).

Pantalla Review

Muestra macros y barra de confianza (confidence*10).toFixed(1).

Save ‚Üí inserta meals + meal_items + actualiza image_path.

Fix‚≠ê ‚Üí abre modal ‚Üí llama analyze-food con fixPrompt ‚Üí reemplaza an√°lisis.

Actualizaci√≥n en vivo

Hook useMealsToday notificado ‚Üí refresca DailyProgress y RecentFoods.

5 ¬∑ Modelo IA & costes
Modelo	‚Ç¨/1 k im√°genes*	Latencia	Precisi√≥n (macro)	Notas
GPT-4o Vision	‚âà 3 ‚Ç¨	5-9 s	88-92 %	Prompt ajustable, JSON directo
Calorie Mama	‚âà 2 ‚Ç¨	1-2 s	85-88 %	Fallback si coste sube
Cloud Vision + Gemini	‚âà 1 ‚Ç¨	4-6 s	82-87 %	Pipeline doble, m√°s c√≥digo

* Incluye tokens texto promedio (‚âà 700 tok).

Estrategia : producci√≥n inicial con GPT-4o; m√©trica ‚Äúcoste por comida‚Äù monitorizada ‚Üí si supera 0 .025 ‚Ç¨, enrutar a Calorie Mama y reservar GPT-4o para correcciones Fix‚≠ê.

6 ¬∑ Infraestructura (Fase 1 fusionada)
Los pasos CLI detallados por el ingeniero se mantienen; a√±adimos:

Rate limit en Edge Function (60 rpm) con tabla KV en Postgres.

Logging: cada llamada inserta en food_analysis_logs (user_id, latency_ms, model, cost_usd).

7 ¬∑ Plan de trabajo consolidado
Fase	Horas	Entregables
1. Infra + Edge Function	10	Bucket, policy, CLI deploy, logging & tests script
2. Estado & Hooks	6	nutritionStore, useMealsToday, useUploadImage
3. Captura & An√°lisis	12	capture.tsx, analyzing.tsx, flujo subida + draft
4. UI/UX Review & Detail	14	MealReviewScreen, modal Fix, MealDetailScreen, componentes
5. Home redesign	6	Refactor nutrition.tsx (DailyProgress, RecentFoods)
6. Persistencia & Realtime	4	Inserci√≥n meals/items, live refresh, error handling
7. QA + Edge cases	6	Permisos c√°mara, offline, timeouts, fallback Calorie Mama
Total	‚âà 58 h	

8 ¬∑ Riesgos y mitigaciones
Riesgo	Mitigaci√≥n
Estimaci√≥n peso imprecisa	Mostrar confianza, bot√≥n Fix‚≠ê, logging para prompt tuning
Coste IA se dispare	Umbral coste ‚Üí fallback, cron job para email reporte mensual
Latencia Edge > 10 s	Skeleton loader + cancel; compresi√≥n < 1 MB
Usuario sin conexi√≥n	Guardar foto local (FileSystem) y re-intentar cuando vuelva online

9 ¬∑ Pr√≥ximos pasos
Confirmar que este plan consolidado cubre todos tus requisitos.

Bloquear el nombre final de las rutas (para evitar refactors).

Yo generar√© todos los archivos de c√≥digo (pantallas, componentes, hook, store y funci√≥n Deno) listos para copiar-pegar, siguiendo tu estructura de proyecto.

Cuando me des luz verde üëç, pasar√© a escribir los archivos con su contenido completo.